https://esp8266.vn/freertos-sdk/basic/basic-task/ Tài liệu tiếng việt **

https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/system/freertos.html Tài liệu tiếng anh



http://arduino.vn/bai-viet/1673-chay-da-nhiem-tren-arduino-voi-freertos - LẬP TRÌNH ĐA NHIỆM FreeRTOS


nó cũng cho phép triển khai các cơ chế điều độ giữa các tiến trình như: queues, counting semaphore, mutexes. (Wikipedia).

https://www.youtube.com/watch?v=E9FY-IOvC3Q&t=2s ***



https://viblo.asia/p/su-khac-nhau-giua-stack-va-queue-L4x5xM2wKBM queue

https://nguyenvanhieu.vn/hang-doi-queue/#3-ung-dung-cua-hang-doi **


https://www.youtube.com/watch?v=31g6_uJ4kdE event_h


Phần điều khiểu Led a cần:

init: chân điều khiển led + số lượng led trên mạch

phần điều khiển: cần tạo 1 enum liệt kê tất cả các trạng thái điều khiển LED

- Start: Cần 1 hiệu ứng cầu vồng chạy trong 10s

- Chờ WiFi connect: 1 hiệu ứng nhấp nháy màu đỏ 2 lần trong 5s là nháy liên tục cho đến khi kết nối được

- Kết nối WiFi thành công: Sáng màu vàng.

- Chế độ Config dùng để cài đặt WiFi: 1 hiệu ứng nhấp nháy màu xanh lá cây 2 lần trong 5s và nháy liên tục cho đến khi có thông tin của WiFi được cài đặt. Sau khi có thông tin WiFi, sáng màu vàng.

- Chế độ Config cho phép Add thiết bị mới vào mạng: 1 hiệu ứng nhấp nháy màu  xanh dương 2 lần trong 5s và nháy liên tục cho đến khi có thiết bị mới Join vào mạng. Sau khi có thiết bị mới, sáng màu vàng.

Trước mắt a cần 3 hiệu ứng đầu tiên.

Cần tìm hiểu cho a 3 cái quan trọng trong lập trình vi điều khiển cũng như OS trong ESP32: Task, Queue + Timer. Trước khi cuối tuần a cần e báo cáo cho a cách dùng 3 cái này trước nhé. Còn led làm không kịp cũng không sao.



https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/bluetooth/esp_blufi.html


// state_machine_led led_state_at = LED_RAINBOW;
// void state_machine()
// {

//   uint64_t lastTick = esp_timer_get_time();
//   color.r = 250;
//   color.g = 0;
//   color.b = 0;

//   color2 = color;

//   //  if ( led_state_at == LED_RAINBOW )
//   //   {
//   //       led_state_at = LED_RAINBOW;
//   //       ESP_LOGI(TAG, "state_machine: waiting... 10s");
//   //   }
//   led_state_at = LED_RAINBOW;
//   ESP_LOGI(TAG, "state_machine: waiting... 10s");

//   while (1)
//   {

//     uint64_t currentTick = esp_timer_get_time();
//     if (currentTick - lastTick > 60000)
//     {

//       switch (led_state_at)
//       {
//       case LED_RAINBOW:
//         rainbow();
//         break;
//       case LED_RED:
//         red();
//         break;
//       case LED_YELLOW:
//         yellow();
//         break;
//       }
//       lastTick = currentTick;
//     }

//     if (esp_timer_get_time() > 9000000 && led_state_at == LED_RAINBOW)
//     {
//       ESP_LOGI(TAG, "state_machine: finish... 10s");
//       led_state_at = LED_RED;
//       esp_wifi_connect();
//       last_tick_led_red = esp_timer_get_time();
//     }
//   }
// }


// typedef esp_err_t (*wifi_led_callback_at)(void *arg, esp_event_base_t event_base,
//                                           int32_t event_id, void *event_data);

// esp_err_t event_wifi_led_handler_at(void *arg, esp_event_base_t event_base,
//                                     int32_t event_id, void *event_data);

// void wifi_init_wifi_led_sst(void);
// void wifi_call_led_sst(void);
// void wifi_led_start_sst(void);

// static const char *TAG_LED_NEW = "wifi LED";
// void wifi_init_wifi_led_sst(void)
// {
//   ESP_LOGI(TAG_LED_NEW, "ESP_WIFI_MODE_STA");
//   ESP_ERROR_CHECK(nvs_flash_init());
//   ESP_ERROR_CHECK(esp_netif_init());
//   ESP_ERROR_CHECK(esp_event_loop_create_default());
//   esp_netif_create_default_wifi_sta();
//   wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
//   ESP_ERROR_CHECK(esp_wifi_init(&cfg));
// }

// void wifi_call_led_sst(void)
// {
//   ESP_ERROR_CHECK(esp_event_handler_register("WIFI_EVENT", LED_RAINBOW, event_wifi_led_handler_at, NULL));
//   ESP_ERROR_CHECK(esp_event_handler_register("WIFI_EVENT", LED_RED, event_wifi_led_handler_at, NULL));
//   ESP_ERROR_CHECK(esp_event_handler_register("IP_EVENT", LED_YELLOW, event_wifi_led_handler_at, NULL));
// }

// void wifi_led_start_sst(void)
// {
//   ESP_LOGI(TAG_LED_NEW, "wifi_init_sta finished.");
//   ESP_ERROR_CHECK(esp_wifi_start());
// }










https://freertos.org/FreeRTOS_Support_Forum_Archive/December_2017/freertos_Assert_in_xQueueGenericReceive_function_of_Queue.c_File_of_FreeRTOS_v9.0.0_e6df96a4j.html






void state_led_rainbow(void)
{

  static uint8_t step = 0;
  static uint8_t step2 = 0;
  rgbVal *pixels;

  pixels = malloc(sizeof(rgbVal) * pixel_count);
  color = color2;
  step = step2;
  for (uint8_t i = 0; i < pixel_count; i++)
  {
    pixels[i] = color;

    if (i == 1)
    {
      color2 = color;
      step2 = step;
    }
    switch (step)
    {
    case 0:
      color.g += anim_step;
      if (color.g >= anim_max)
        step++;
      break;
    case 1:
      color.r -= anim_step;
      if (color.r == 0)
        step++;
      break;
    case 2:
      color.b += anim_step;
      if (color.b >= anim_max)
        step++;
      break;
    case 3:
      color.g -= anim_step;
      if (color.g == 0)
        step++;
      break;
    case 4:
      color.r += anim_step;
      if (color.r >= anim_max)
        step++;
      break;
    case 5:
      color.b -= anim_step;
      if (color.b == 0)
        step = 0;
      break;
    }
  }

  ws2812_setColors(pixel_count, pixels);
    
}

void state_led_yellow(void)
{

  color.r = 255;
  color.g = 255;
  color.b = 0;

  uint8_t step = 0;
  uint8_t step2 = 0;
  rgbVal *pixels;

  uint64_t led_yellow = esp_timer_get_time();

  pixels = malloc(sizeof(rgbVal) * pixel_count);

  color2 = color;
  step = step2;

  for (uint8_t i = 0; i < pixel_count; i++)
  {
    pixels[i] = color;

    if (i == 1)
    {
      color2 = color;
      step2 = step;
    }
  }
  ws2812_setColors(pixel_count, pixels);
}


void state_led_red(void)
{

  uint8_t step = 0;
  uint8_t step2 = 0;
  rgbVal *pixels;

  current_tick_led = esp_timer_get_time();
  if ((current_tick_led - last_tick_led > 2500000) && blink_led == 0)
  {

    color.r = 0;
    color.g = 0;
    color.b = 0;
    last_tick_led = current_tick_led;
    blink_led = 1;
  }
  else if ((current_tick_led - last_tick_led > 2500000) && blink_led == 1)
  {

    color.r = 250;
    color.g = 0;
    color.b = 0;
    last_tick_led = current_tick_led;
    blink_led = 0;
  }

  pixels = malloc(sizeof(rgbVal) * pixel_count);
  color2 = color;
  step = step2;
  for (uint8_t i = 0; i < pixel_count; i++)
  {
    pixels[i] = color;

    if (i == 1)
    {
      color2 = color;
      step2 = step;
    }
  }

  ws2812_setColors(pixel_count, pixels);

}

void state_led_green(void)
{

  color.r = 0;
  color.g = 255;
  color.b = 0;

  uint8_t step = 0;
  uint8_t step2 = 0;
  rgbVal *pixels;

  uint64_t led_yellow = esp_timer_get_time();

  pixels = malloc(sizeof(rgbVal) * pixel_count);

  color2 = color;
  step = step2;

  for (uint8_t i = 0; i < pixel_count; i++)
  {
    pixels[i] = color;

    if (i == 1)
    {
      color2 = color;
      step2 = step;
    }
  }
  ws2812_setColors(pixel_count, pixels);
}

int32_t next_state_led = LED_ANY;
bool f=false;
void set_state_led_sst(int32_t event_id_led)
{
  if (event_id_led == LED_GREEN || f)
  {
    f = true;
  }
  if (f)
  {
    state_led_green();
    return;
  }
  uint64_t lastTick = esp_timer_get_time();
  while (1)
    {
        uint64_t currentTick = esp_timer_get_time();
        if (currentTick - lastTick > 60000)
        {
          switch (event_id_led)
          {
            case LED_RAINBOW:
              state_led_rainbow();
              break;
            case LED_RED:
              state_led_red();
              break;
            case LED_YELLOW:
              state_led_yellow();
              break;
          }
          lastTick = currentTick;
        }
        printf("%d",event_id_led);
        vTaskDelay(200);
    }
}

ssh root@192.168.1.7
The authenticity of host '192.168.1.7 (192.168.1.7)' can't be established.
ECDSA key fingerprint is SHA256:WbvEh6nIUs3HYUwtM7/QpccXClijn0NepHl4pu525IY.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '192.168.1.7' (ECDSA) to the list of known hosts.
root@192.168.1.7's password: 
 _    _                                         _     _              _   
| |  | |                          /\           (_)   | |            | |  
| |__| | ___  _ __ ___   ___     /  \   ___ ___ _ ___| |_ __ _ _ __ | |_ 
|  __  |/ _ \| '_ ` _ \ / _ \   / /\ \ / __/ __| / __| __/ _` | '_ \| __|
| |  | | (_) | | | | | |  __/  / ____ \\__ \__ \ \__ \ || (_| | | | | |_ 
|_|  |_|\___/|_| |_| |_|\___| /_/    \_\___/___/_|___/\__\__,_|_| |_|\__|
                                                                         

Our command line:
$ ha help

~ $ ls
addons  backup  config  share   ssl
~ $ cd config
config $ ls
automations.yaml      deps                  scenes.yaml
configuration.yaml    groups.yaml           scripts.yaml
custom_components     home-assistant.log    secrets.yaml
customize.yaml        home-assistant_v2.db  tts
config $ reboot
Connection to 192.168.1.7 closed by remote host.
Connection to 192.168.1.7 closed.
anhtran@anhtran-X556URK:~/esp/esp-idf/examples/peripherals/uart$ 




